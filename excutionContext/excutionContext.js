//js엔진의 평가 -> 실행컨텍스트 생성 -> 실행컨텍스트스택에 푸쉬 ,실행컨텍스트 등록 -> 실행.

const x = 1;
const y = 2;

function foo(a) {
    const x = 10;
    const y = 10;

    console.log(a + x + y); //100 + 10 + 10
}

foo(100);

console.log(x + y); // 1+2

//선언에 의해 생성된 모든식별자(함수,변수,클래스) 를 스코프를 구분하여 등록하고 상태변화를 지속적으로관리한다.
//스코프는 중첩 관계에 의해 스코프체인을 형성해야 한다. 스코프체인을 통해 상위스코프로 이동하여 식별자를 검색한다.
//현재 실행중인 코드의 실행 순서를 변경할수있다. 다시 되돌아갈수도 있다.

//이모든것을 관리하는 것이 실행컨텍스트 이다. 실행 컨텍스트는 소스코드를 실행하는데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.\

//식별자와 스코프는 실행컨텍스트의 '렉시컬 환경' 으로 관리하고  코드실행순서는 '실행 컨텍스트 스택' 으로 관리한다.

//렉시컬 환경 : 식별자와 식별자에 바인딩된 값. 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다. 스코프와 식별자를 관리하는 역할을 하는 컴포넌트다.

//실행컨택스트 스택 : 코드의 실행 순서를 관리하는 역할을 하는 실행 컨텍스트를 구성하는 컴포넌트다.

const a = 1;

function poo() {
    const y = 2;
    function bar() {
        const z = 3;
        console.log(a + y + z);//1+2+3
    }
    bar();
}

poo(); 